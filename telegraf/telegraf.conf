# Telegraf Configuration for SmartSolar Data Sync to InfluxDB Cloud
# Handles intermittent connectivity with persistent buffering

# Global Agent Configuration
[agent]
  ## Default data collection interval
  interval = "30s"
  
  ## Default flushing interval (how often to write to outputs)
  flush_interval = "10s"
  
  ## Maximum number of metrics to buffer in memory
  metric_buffer_limit = 50000
  
  ## Collection jitter to prevent all plugins from running at once
  collection_jitter = "5s"
  
  ## Precision of timestamps
  precision = "1ms"
  
  ## Log level
  debug = false
  quiet = false
  
  ## Override default hostname
  hostname = "${BALENA_DEVICE_NAME_AT_INIT}"

# Input: Tail NDJSON files for real-time data
[[inputs.tail]]
  ## Files to tail
  files = ["/data/smartsolar-v1/data_*.ndjson"]
  
  ## Start from beginning of file on first run
  from_beginning = true
  
  ## Method used to watch for file updates
  watch_method = "inotify"
  
  ## Data format
  data_format = "json"
  
  ## Tag keys - these fields will become tags in InfluxDB
  tag_keys = ["device_name", "device_address"]
  
  ## Time key and format
  json_time_key = "timestamp"
  json_time_format = "2006-01-02T15:04:05.999999Z07:00"
  
  ## Name of the measurement
  name_override = "smartsolar"
  
  ## Add path as a tag to distinguish between files
  path_tag = true

# Processor: Extract nested parsed_data fields
[[processors.json_v2]]
  [[processors.json_v2.object]]
    path = "@this"
    tags = ["device_name", "device_address"]
    
    ## Extract all fields from parsed_data (when available)
    [[processors.json_v2.object.field]]
      path = "parsed_data"
      type = "object"
      optional = true
      
    ## Keep raw_data as a field if present
    [[processors.json_v2.object.field]]
      path = "raw_data"
      optional = true
      
    ## Extract readings as separate fields (when no encryption key)
    [[processors.json_v2.object.field]]
      path = "readings"
      type = "object"
      optional = true

# Output: InfluxDB v2 Cloud with persistent buffering
[[outputs.influxdb_v2]]
  ## InfluxDB Cloud URL
  urls = ["${INFLUX_URL}"]
  
  ## Authentication token
  token = "${INFLUX_TOKEN}"
  
  ## Organization and bucket
  organization = "${INFLUX_ORG}"
  bucket = "${INFLUX_BUCKET}"
  
  ## Timeout for HTTP requests
  timeout = "30s"
  
  ## User agent
  user_agent = "telegraf-smartsolar"
  
  ## Retry configuration for failed writes
  ## Maximum time to retry a failed write
  max_retry_time = "168h"  # 7 days
  
  ## Initial retry interval
  retry_interval = "10s"
  
  ## Maximum retry interval
  max_retry_interval = "10m"
  
  ## Exponential backoff base
  exponential_base = 2
  
  ## Enable gzip compression
  content_encoding = "gzip"
  
  ## Persistent buffer configuration
  ## This is crucial for handling long disconnection periods
  [outputs.influxdb_v2.buffer]
    ## Enable persistent buffering to disk
    persistent_buffer_enabled = true
    
    ## Directory to store buffer files
    persistent_buffer_directory = "/var/lib/telegraf/buffer"
    
    ## Maximum size of the persistent buffer (adjust based on your needs)
    ## 500MB should handle several days of data at 1 reading/minute
    persistent_buffer_size_limit = "500MB"
    
    ## Write buffer to disk when this many metrics are buffered
    persistent_buffer_write_interval = "10s"

# Optional: File input for batch processing of completed files
# Uncomment if you want to also process completed daily files
# [[inputs.file]]
#   ## Read completed NDJSON files
#   files = ["/data/smartsolar-v1/data_*.ndjson"]
#   
#   ## Data format
#   data_format = "json"
#   
#   ## Only read files older than 1 hour to ensure they're complete
#   file_age_limit = "1h"
#   
#   ## State tracking
#   file_state_directory = "/var/lib/telegraf/file_state"
#   file_state_filename = "file_state.db"
#   
#   ## Same parsing configuration as tail input
#   tag_keys = ["device_name", "device_address"]
#   json_time_key = "timestamp"
#   json_time_format = "2006-01-02T15:04:05.999999Z07:00"
#   name_override = "smartsolar"

# Optional: Internal metrics about Telegraf itself
[[inputs.internal]]
  ## Collect metrics about Telegraf's performance
  collect_memstats = true
  
  ## Name of the measurement
  name_override = "telegraf_stats"
  
  ## Collection interval
  interval = "60s" 